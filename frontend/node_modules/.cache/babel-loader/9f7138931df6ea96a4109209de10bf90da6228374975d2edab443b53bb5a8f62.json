{"ast":null,"code":"// Mock API service for development\n// This simulates backend API calls without requiring a real backend\n\n// Mock users database\nconst mockUsers = [{\n  id: '1',\n  name: 'John Doe',\n  email: 'john@example.com',\n  isAdmin: false\n}, {\n  id: '2',\n  name: 'Jane Smith',\n  email: 'jane@example.com',\n  isAdmin: true\n}];\n\n// Mock swap requests\nconst mockSwapRequests = [{\n  id: '1',\n  type: 'received',\n  from: 'John Doe',\n  skill: 'React Development',\n  message: 'I need help with React hooks and state management. Can you help me?',\n  status: 'pending',\n  date: '2 hours ago'\n}, {\n  id: '2',\n  type: 'sent',\n  to: 'Jane Smith',\n  skill: 'Python Programming',\n  message: 'I would like to learn Python basics and data structures.',\n  status: 'accepted',\n  date: '1 day ago'\n}];\n\n// Mock users for browse page\nconst mockBrowseUsers = [{\n  id: 1,\n  name: 'John Doe',\n  location: 'New York, NY',\n  rating: 4.8,\n  skillsOffered: ['React', 'JavaScript', 'TypeScript'],\n  skillsWanted: ['Python', 'Machine Learning'],\n  bio: 'Frontend developer with 5 years of experience'\n}, {\n  id: 2,\n  name: 'Jane Smith',\n  location: 'San Francisco, CA',\n  rating: 4.9,\n  skillsOffered: ['Python', 'Data Science', 'Machine Learning'],\n  skillsWanted: ['React', 'UI/UX Design'],\n  bio: 'Data scientist passionate about AI and ML'\n}, {\n  id: 3,\n  name: 'Mike Johnson',\n  location: 'Austin, TX',\n  rating: 4.7,\n  skillsOffered: ['UI/UX Design', 'Figma', 'Adobe Creative Suite'],\n  skillsWanted: ['JavaScript', 'Web Development'],\n  bio: 'Creative designer with expertise in user experience'\n}];\nclass ApiService {\n  constructor() {\n    this.token = null;\n  }\n  // Authentication\n  async login(email, password) {\n    // Simulate API delay\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    const user = mockUsers.find(u => u.email === email);\n    if (!user || password !== 'password') {\n      throw new Error('Invalid credentials');\n    }\n    const token = `mock-jwt-token-${user.id}`;\n    this.token = token;\n    return {\n      success: true,\n      user,\n      token\n    };\n  }\n  async register(name, email, password) {\n    // Simulate API delay\n    await new Promise(resolve => setTimeout(resolve, 1000));\n\n    // Check if user already exists\n    if (mockUsers.find(u => u.email === email)) {\n      throw new Error('User already exists with this email');\n    }\n    const newUser = {\n      id: (mockUsers.length + 1).toString(),\n      name,\n      email,\n      isAdmin: false\n    };\n    mockUsers.push(newUser);\n    const token = `mock-jwt-token-${newUser.id}`;\n    this.token = token;\n    return {\n      success: true,\n      user: newUser,\n      token\n    };\n  }\n\n  // User management\n  async getUsers() {\n    await new Promise(resolve => setTimeout(resolve, 500));\n    return {\n      success: true,\n      count: mockBrowseUsers.length,\n      data: mockBrowseUsers\n    };\n  }\n  async getUserById(id) {\n    await new Promise(resolve => setTimeout(resolve, 500));\n    const user = mockBrowseUsers.find(u => u.id.toString() === id);\n    if (!user) {\n      throw new Error('User not found');\n    }\n    return {\n      success: true,\n      data: user\n    };\n  }\n\n  // Swap requests\n  async getReceivedRequests() {\n    await new Promise(resolve => setTimeout(resolve, 500));\n    const received = mockSwapRequests.filter(req => req.type === 'received');\n    return {\n      success: true,\n      count: received.length,\n      data: received\n    };\n  }\n  async getSentRequests() {\n    await new Promise(resolve => setTimeout(resolve, 500));\n    const sent = mockSwapRequests.filter(req => req.type === 'sent');\n    return {\n      success: true,\n      count: sent.length,\n      data: sent\n    };\n  }\n  async sendSwapRequest(recipientId, skillOffered, skillWanted, message) {\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    if (!skillOffered.trim() || !skillWanted.trim() || !message.trim()) {\n      throw new Error('Please fill in all fields');\n    }\n    const newRequest = {\n      id: (mockSwapRequests.length + 1).toString(),\n      type: 'sent',\n      to: `User ${recipientId}`,\n      skill: skillWanted,\n      message,\n      status: 'pending',\n      date: 'Just now'\n    };\n    mockSwapRequests.push(newRequest);\n    return {\n      success: true,\n      data: newRequest\n    };\n  }\n  async acceptSwapRequest(id) {\n    await new Promise(resolve => setTimeout(resolve, 500));\n    const request = mockSwapRequests.find(req => req.id === id);\n    if (request) {\n      request.status = 'accepted';\n    }\n    return {\n      success: true,\n      data: request\n    };\n  }\n  async rejectSwapRequest(id) {\n    await new Promise(resolve => setTimeout(resolve, 500));\n    const request = mockSwapRequests.find(req => req.id === id);\n    if (request) {\n      request.status = 'rejected';\n    }\n    return {\n      success: true,\n      data: request\n    };\n  }\n\n  // Skills\n  async getSkills() {\n    await new Promise(resolve => setTimeout(resolve, 500));\n    const allSkillsOffered = mockBrowseUsers.flatMap(user => user.skillsOffered);\n    const allSkillsWanted = mockBrowseUsers.flatMap(user => user.skillsWanted);\n    const uniqueSkillsOffered = Array.from(new Set(allSkillsOffered));\n    const uniqueSkillsWanted = Array.from(new Set(allSkillsWanted));\n    return {\n      success: true,\n      data: {\n        offered: uniqueSkillsOffered,\n        wanted: uniqueSkillsWanted\n      }\n    };\n  }\n\n  // Admin\n  async getAdminStats() {\n    await new Promise(resolve => setTimeout(resolve, 500));\n    return {\n      success: true,\n      data: {\n        totalUsers: 1250,\n        activeUsers: 1180,\n        bannedUsers: 70,\n        totalSwaps: 3400,\n        completedSwaps: 2800\n      }\n    };\n  }\n  async getAllUsers() {\n    await new Promise(resolve => setTimeout(resolve, 500));\n    return {\n      success: true,\n      count: mockUsers.length,\n      data: mockUsers\n    };\n  }\n\n  // Utility methods\n  setToken(token) {\n    this.token = token;\n  }\n  getToken() {\n    return this.token;\n  }\n  clearToken() {\n    this.token = null;\n  }\n}\nexport const apiService = new ApiService();","map":{"version":3,"names":["mockUsers","id","name","email","isAdmin","mockSwapRequests","type","from","skill","message","status","date","to","mockBrowseUsers","location","rating","skillsOffered","skillsWanted","bio","ApiService","constructor","token","login","password","Promise","resolve","setTimeout","user","find","u","Error","success","register","newUser","length","toString","push","getUsers","count","data","getUserById","getReceivedRequests","received","filter","req","getSentRequests","sent","sendSwapRequest","recipientId","skillOffered","skillWanted","trim","newRequest","acceptSwapRequest","request","rejectSwapRequest","getSkills","allSkillsOffered","flatMap","allSkillsWanted","uniqueSkillsOffered","Array","Set","uniqueSkillsWanted","offered","wanted","getAdminStats","totalUsers","activeUsers","bannedUsers","totalSwaps","completedSwaps","getAllUsers","setToken","getToken","clearToken","apiService"],"sources":["C:/Users/agraw/Desktop/projects/odoo_hackathon/odoo/frontend/src/services/api.ts"],"sourcesContent":["// Mock API service for development\r\n// This simulates backend API calls without requiring a real backend\r\n\r\ninterface User {\r\n  id: string;\r\n  name: string;\r\n  email: string;\r\n  isAdmin: boolean;\r\n}\r\n\r\ninterface LoginResponse {\r\n  success: boolean;\r\n  user: User;\r\n  token: string;\r\n}\r\n\r\ninterface RegisterResponse {\r\n  success: boolean;\r\n  user: User;\r\n  token: string;\r\n}\r\n\r\n// Mock users database\r\nconst mockUsers: User[] = [\r\n  {\r\n    id: '1',\r\n    name: 'John Doe',\r\n    email: 'john@example.com',\r\n    isAdmin: false\r\n  },\r\n  {\r\n    id: '2',\r\n    name: 'Jane Smith',\r\n    email: 'jane@example.com',\r\n    isAdmin: true\r\n  }\r\n];\r\n\r\n// Mock swap requests\r\nconst mockSwapRequests = [\r\n  {\r\n    id: '1',\r\n    type: 'received',\r\n    from: 'John Doe',\r\n    skill: 'React Development',\r\n    message: 'I need help with React hooks and state management. Can you help me?',\r\n    status: 'pending',\r\n    date: '2 hours ago'\r\n  },\r\n  {\r\n    id: '2',\r\n    type: 'sent',\r\n    to: 'Jane Smith',\r\n    skill: 'Python Programming',\r\n    message: 'I would like to learn Python basics and data structures.',\r\n    status: 'accepted',\r\n    date: '1 day ago'\r\n  }\r\n];\r\n\r\n// Mock users for browse page\r\nconst mockBrowseUsers = [\r\n  {\r\n    id: 1,\r\n    name: 'John Doe',\r\n    location: 'New York, NY',\r\n    rating: 4.8,\r\n    skillsOffered: ['React', 'JavaScript', 'TypeScript'],\r\n    skillsWanted: ['Python', 'Machine Learning'],\r\n    bio: 'Frontend developer with 5 years of experience'\r\n  },\r\n  {\r\n    id: 2,\r\n    name: 'Jane Smith',\r\n    location: 'San Francisco, CA',\r\n    rating: 4.9,\r\n    skillsOffered: ['Python', 'Data Science', 'Machine Learning'],\r\n    skillsWanted: ['React', 'UI/UX Design'],\r\n    bio: 'Data scientist passionate about AI and ML'\r\n  },\r\n  {\r\n    id: 3,\r\n    name: 'Mike Johnson',\r\n    location: 'Austin, TX',\r\n    rating: 4.7,\r\n    skillsOffered: ['UI/UX Design', 'Figma', 'Adobe Creative Suite'],\r\n    skillsWanted: ['JavaScript', 'Web Development'],\r\n    bio: 'Creative designer with expertise in user experience'\r\n  }\r\n];\r\n\r\nclass ApiService {\r\n  private token: string | null = null;\r\n\r\n  // Authentication\r\n  async login(email: string, password: string): Promise<LoginResponse> {\r\n    // Simulate API delay\r\n    await new Promise(resolve => setTimeout(resolve, 1000));\r\n\r\n    const user = mockUsers.find(u => u.email === email);\r\n    \r\n    if (!user || password !== 'password') {\r\n      throw new Error('Invalid credentials');\r\n    }\r\n\r\n    const token = `mock-jwt-token-${user.id}`;\r\n    this.token = token;\r\n\r\n    return {\r\n      success: true,\r\n      user,\r\n      token\r\n    };\r\n  }\r\n\r\n  async register(name: string, email: string, password: string): Promise<RegisterResponse> {\r\n    // Simulate API delay\r\n    await new Promise(resolve => setTimeout(resolve, 1000));\r\n\r\n    // Check if user already exists\r\n    if (mockUsers.find(u => u.email === email)) {\r\n      throw new Error('User already exists with this email');\r\n    }\r\n\r\n    const newUser: User = {\r\n      id: (mockUsers.length + 1).toString(),\r\n      name,\r\n      email,\r\n      isAdmin: false\r\n    };\r\n\r\n    mockUsers.push(newUser);\r\n    const token = `mock-jwt-token-${newUser.id}`;\r\n    this.token = token;\r\n\r\n    return {\r\n      success: true,\r\n      user: newUser,\r\n      token\r\n    };\r\n  }\r\n\r\n  // User management\r\n  async getUsers() {\r\n    await new Promise(resolve => setTimeout(resolve, 500));\r\n    return {\r\n      success: true,\r\n      count: mockBrowseUsers.length,\r\n      data: mockBrowseUsers\r\n    };\r\n  }\r\n\r\n  async getUserById(id: string) {\r\n    await new Promise(resolve => setTimeout(resolve, 500));\r\n    const user = mockBrowseUsers.find(u => u.id.toString() === id);\r\n    \r\n    if (!user) {\r\n      throw new Error('User not found');\r\n    }\r\n\r\n    return {\r\n      success: true,\r\n      data: user\r\n    };\r\n  }\r\n\r\n  // Swap requests\r\n  async getReceivedRequests() {\r\n    await new Promise(resolve => setTimeout(resolve, 500));\r\n    const received = mockSwapRequests.filter(req => req.type === 'received');\r\n    \r\n    return {\r\n      success: true,\r\n      count: received.length,\r\n      data: received\r\n    };\r\n  }\r\n\r\n  async getSentRequests() {\r\n    await new Promise(resolve => setTimeout(resolve, 500));\r\n    const sent = mockSwapRequests.filter(req => req.type === 'sent');\r\n    \r\n    return {\r\n      success: true,\r\n      count: sent.length,\r\n      data: sent\r\n    };\r\n  }\r\n\r\n  async sendSwapRequest(recipientId: string, skillOffered: string, skillWanted: string, message: string) {\r\n    await new Promise(resolve => setTimeout(resolve, 1000));\r\n    \r\n    if (!skillOffered.trim() || !skillWanted.trim() || !message.trim()) {\r\n      throw new Error('Please fill in all fields');\r\n    }\r\n    \r\n    const newRequest = {\r\n      id: (mockSwapRequests.length + 1).toString(),\r\n      type: 'sent',\r\n      to: `User ${recipientId}`,\r\n      skill: skillWanted,\r\n      message,\r\n      status: 'pending',\r\n      date: 'Just now'\r\n    };\r\n\r\n    mockSwapRequests.push(newRequest);\r\n\r\n    return {\r\n      success: true,\r\n      data: newRequest\r\n    };\r\n  }\r\n\r\n  async acceptSwapRequest(id: string) {\r\n    await new Promise(resolve => setTimeout(resolve, 500));\r\n    \r\n    const request = mockSwapRequests.find(req => req.id === id);\r\n    if (request) {\r\n      request.status = 'accepted';\r\n    }\r\n\r\n    return {\r\n      success: true,\r\n      data: request\r\n    };\r\n  }\r\n\r\n  async rejectSwapRequest(id: string) {\r\n    await new Promise(resolve => setTimeout(resolve, 500));\r\n    \r\n    const request = mockSwapRequests.find(req => req.id === id);\r\n    if (request) {\r\n      request.status = 'rejected';\r\n    }\r\n\r\n    return {\r\n      success: true,\r\n      data: request\r\n    };\r\n  }\r\n\r\n  // Skills\r\n  async getSkills() {\r\n    await new Promise(resolve => setTimeout(resolve, 500));\r\n    \r\n    const allSkillsOffered = mockBrowseUsers.flatMap(user => user.skillsOffered);\r\n    const allSkillsWanted = mockBrowseUsers.flatMap(user => user.skillsWanted);\r\n    \r\n    const uniqueSkillsOffered = Array.from(new Set(allSkillsOffered));\r\n    const uniqueSkillsWanted = Array.from(new Set(allSkillsWanted));\r\n\r\n    return {\r\n      success: true,\r\n      data: {\r\n        offered: uniqueSkillsOffered,\r\n        wanted: uniqueSkillsWanted\r\n      }\r\n    };\r\n  }\r\n\r\n  // Admin\r\n  async getAdminStats() {\r\n    await new Promise(resolve => setTimeout(resolve, 500));\r\n    \r\n    return {\r\n      success: true,\r\n      data: {\r\n        totalUsers: 1250,\r\n        activeUsers: 1180,\r\n        bannedUsers: 70,\r\n        totalSwaps: 3400,\r\n        completedSwaps: 2800\r\n      }\r\n    };\r\n  }\r\n\r\n  async getAllUsers() {\r\n    await new Promise(resolve => setTimeout(resolve, 500));\r\n    \r\n    return {\r\n      success: true,\r\n      count: mockUsers.length,\r\n      data: mockUsers\r\n    };\r\n  }\r\n\r\n  // Utility methods\r\n  setToken(token: string) {\r\n    this.token = token;\r\n  }\r\n\r\n  getToken() {\r\n    return this.token;\r\n  }\r\n\r\n  clearToken() {\r\n    this.token = null;\r\n  }\r\n}\r\n\r\nexport const apiService = new ApiService(); "],"mappings":"AAAA;AACA;;AAqBA;AACA,MAAMA,SAAiB,GAAG,CACxB;EACEC,EAAE,EAAE,GAAG;EACPC,IAAI,EAAE,UAAU;EAChBC,KAAK,EAAE,kBAAkB;EACzBC,OAAO,EAAE;AACX,CAAC,EACD;EACEH,EAAE,EAAE,GAAG;EACPC,IAAI,EAAE,YAAY;EAClBC,KAAK,EAAE,kBAAkB;EACzBC,OAAO,EAAE;AACX,CAAC,CACF;;AAED;AACA,MAAMC,gBAAgB,GAAG,CACvB;EACEJ,EAAE,EAAE,GAAG;EACPK,IAAI,EAAE,UAAU;EAChBC,IAAI,EAAE,UAAU;EAChBC,KAAK,EAAE,mBAAmB;EAC1BC,OAAO,EAAE,qEAAqE;EAC9EC,MAAM,EAAE,SAAS;EACjBC,IAAI,EAAE;AACR,CAAC,EACD;EACEV,EAAE,EAAE,GAAG;EACPK,IAAI,EAAE,MAAM;EACZM,EAAE,EAAE,YAAY;EAChBJ,KAAK,EAAE,oBAAoB;EAC3BC,OAAO,EAAE,0DAA0D;EACnEC,MAAM,EAAE,UAAU;EAClBC,IAAI,EAAE;AACR,CAAC,CACF;;AAED;AACA,MAAME,eAAe,GAAG,CACtB;EACEZ,EAAE,EAAE,CAAC;EACLC,IAAI,EAAE,UAAU;EAChBY,QAAQ,EAAE,cAAc;EACxBC,MAAM,EAAE,GAAG;EACXC,aAAa,EAAE,CAAC,OAAO,EAAE,YAAY,EAAE,YAAY,CAAC;EACpDC,YAAY,EAAE,CAAC,QAAQ,EAAE,kBAAkB,CAAC;EAC5CC,GAAG,EAAE;AACP,CAAC,EACD;EACEjB,EAAE,EAAE,CAAC;EACLC,IAAI,EAAE,YAAY;EAClBY,QAAQ,EAAE,mBAAmB;EAC7BC,MAAM,EAAE,GAAG;EACXC,aAAa,EAAE,CAAC,QAAQ,EAAE,cAAc,EAAE,kBAAkB,CAAC;EAC7DC,YAAY,EAAE,CAAC,OAAO,EAAE,cAAc,CAAC;EACvCC,GAAG,EAAE;AACP,CAAC,EACD;EACEjB,EAAE,EAAE,CAAC;EACLC,IAAI,EAAE,cAAc;EACpBY,QAAQ,EAAE,YAAY;EACtBC,MAAM,EAAE,GAAG;EACXC,aAAa,EAAE,CAAC,cAAc,EAAE,OAAO,EAAE,sBAAsB,CAAC;EAChEC,YAAY,EAAE,CAAC,YAAY,EAAE,iBAAiB,CAAC;EAC/CC,GAAG,EAAE;AACP,CAAC,CACF;AAED,MAAMC,UAAU,CAAC;EAAAC,YAAA;IAAA,KACPC,KAAK,GAAkB,IAAI;EAAA;EAEnC;EACA,MAAMC,KAAKA,CAACnB,KAAa,EAAEoB,QAAgB,EAA0B;IACnE;IACA,MAAM,IAAIC,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,IAAI,CAAC,CAAC;IAEvD,MAAME,IAAI,GAAG3B,SAAS,CAAC4B,IAAI,CAACC,CAAC,IAAIA,CAAC,CAAC1B,KAAK,KAAKA,KAAK,CAAC;IAEnD,IAAI,CAACwB,IAAI,IAAIJ,QAAQ,KAAK,UAAU,EAAE;MACpC,MAAM,IAAIO,KAAK,CAAC,qBAAqB,CAAC;IACxC;IAEA,MAAMT,KAAK,GAAG,kBAAkBM,IAAI,CAAC1B,EAAE,EAAE;IACzC,IAAI,CAACoB,KAAK,GAAGA,KAAK;IAElB,OAAO;MACLU,OAAO,EAAE,IAAI;MACbJ,IAAI;MACJN;IACF,CAAC;EACH;EAEA,MAAMW,QAAQA,CAAC9B,IAAY,EAAEC,KAAa,EAAEoB,QAAgB,EAA6B;IACvF;IACA,MAAM,IAAIC,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,IAAI,CAAC,CAAC;;IAEvD;IACA,IAAIzB,SAAS,CAAC4B,IAAI,CAACC,CAAC,IAAIA,CAAC,CAAC1B,KAAK,KAAKA,KAAK,CAAC,EAAE;MAC1C,MAAM,IAAI2B,KAAK,CAAC,qCAAqC,CAAC;IACxD;IAEA,MAAMG,OAAa,GAAG;MACpBhC,EAAE,EAAE,CAACD,SAAS,CAACkC,MAAM,GAAG,CAAC,EAAEC,QAAQ,CAAC,CAAC;MACrCjC,IAAI;MACJC,KAAK;MACLC,OAAO,EAAE;IACX,CAAC;IAEDJ,SAAS,CAACoC,IAAI,CAACH,OAAO,CAAC;IACvB,MAAMZ,KAAK,GAAG,kBAAkBY,OAAO,CAAChC,EAAE,EAAE;IAC5C,IAAI,CAACoB,KAAK,GAAGA,KAAK;IAElB,OAAO;MACLU,OAAO,EAAE,IAAI;MACbJ,IAAI,EAAEM,OAAO;MACbZ;IACF,CAAC;EACH;;EAEA;EACA,MAAMgB,QAAQA,CAAA,EAAG;IACf,MAAM,IAAIb,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,GAAG,CAAC,CAAC;IACtD,OAAO;MACLM,OAAO,EAAE,IAAI;MACbO,KAAK,EAAEzB,eAAe,CAACqB,MAAM;MAC7BK,IAAI,EAAE1B;IACR,CAAC;EACH;EAEA,MAAM2B,WAAWA,CAACvC,EAAU,EAAE;IAC5B,MAAM,IAAIuB,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,GAAG,CAAC,CAAC;IACtD,MAAME,IAAI,GAAGd,eAAe,CAACe,IAAI,CAACC,CAAC,IAAIA,CAAC,CAAC5B,EAAE,CAACkC,QAAQ,CAAC,CAAC,KAAKlC,EAAE,CAAC;IAE9D,IAAI,CAAC0B,IAAI,EAAE;MACT,MAAM,IAAIG,KAAK,CAAC,gBAAgB,CAAC;IACnC;IAEA,OAAO;MACLC,OAAO,EAAE,IAAI;MACbQ,IAAI,EAAEZ;IACR,CAAC;EACH;;EAEA;EACA,MAAMc,mBAAmBA,CAAA,EAAG;IAC1B,MAAM,IAAIjB,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,GAAG,CAAC,CAAC;IACtD,MAAMiB,QAAQ,GAAGrC,gBAAgB,CAACsC,MAAM,CAACC,GAAG,IAAIA,GAAG,CAACtC,IAAI,KAAK,UAAU,CAAC;IAExE,OAAO;MACLyB,OAAO,EAAE,IAAI;MACbO,KAAK,EAAEI,QAAQ,CAACR,MAAM;MACtBK,IAAI,EAAEG;IACR,CAAC;EACH;EAEA,MAAMG,eAAeA,CAAA,EAAG;IACtB,MAAM,IAAIrB,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,GAAG,CAAC,CAAC;IACtD,MAAMqB,IAAI,GAAGzC,gBAAgB,CAACsC,MAAM,CAACC,GAAG,IAAIA,GAAG,CAACtC,IAAI,KAAK,MAAM,CAAC;IAEhE,OAAO;MACLyB,OAAO,EAAE,IAAI;MACbO,KAAK,EAAEQ,IAAI,CAACZ,MAAM;MAClBK,IAAI,EAAEO;IACR,CAAC;EACH;EAEA,MAAMC,eAAeA,CAACC,WAAmB,EAAEC,YAAoB,EAAEC,WAAmB,EAAEzC,OAAe,EAAE;IACrG,MAAM,IAAIe,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,IAAI,CAAC,CAAC;IAEvD,IAAI,CAACwB,YAAY,CAACE,IAAI,CAAC,CAAC,IAAI,CAACD,WAAW,CAACC,IAAI,CAAC,CAAC,IAAI,CAAC1C,OAAO,CAAC0C,IAAI,CAAC,CAAC,EAAE;MAClE,MAAM,IAAIrB,KAAK,CAAC,2BAA2B,CAAC;IAC9C;IAEA,MAAMsB,UAAU,GAAG;MACjBnD,EAAE,EAAE,CAACI,gBAAgB,CAAC6B,MAAM,GAAG,CAAC,EAAEC,QAAQ,CAAC,CAAC;MAC5C7B,IAAI,EAAE,MAAM;MACZM,EAAE,EAAE,QAAQoC,WAAW,EAAE;MACzBxC,KAAK,EAAE0C,WAAW;MAClBzC,OAAO;MACPC,MAAM,EAAE,SAAS;MACjBC,IAAI,EAAE;IACR,CAAC;IAEDN,gBAAgB,CAAC+B,IAAI,CAACgB,UAAU,CAAC;IAEjC,OAAO;MACLrB,OAAO,EAAE,IAAI;MACbQ,IAAI,EAAEa;IACR,CAAC;EACH;EAEA,MAAMC,iBAAiBA,CAACpD,EAAU,EAAE;IAClC,MAAM,IAAIuB,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,GAAG,CAAC,CAAC;IAEtD,MAAM6B,OAAO,GAAGjD,gBAAgB,CAACuB,IAAI,CAACgB,GAAG,IAAIA,GAAG,CAAC3C,EAAE,KAAKA,EAAE,CAAC;IAC3D,IAAIqD,OAAO,EAAE;MACXA,OAAO,CAAC5C,MAAM,GAAG,UAAU;IAC7B;IAEA,OAAO;MACLqB,OAAO,EAAE,IAAI;MACbQ,IAAI,EAAEe;IACR,CAAC;EACH;EAEA,MAAMC,iBAAiBA,CAACtD,EAAU,EAAE;IAClC,MAAM,IAAIuB,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,GAAG,CAAC,CAAC;IAEtD,MAAM6B,OAAO,GAAGjD,gBAAgB,CAACuB,IAAI,CAACgB,GAAG,IAAIA,GAAG,CAAC3C,EAAE,KAAKA,EAAE,CAAC;IAC3D,IAAIqD,OAAO,EAAE;MACXA,OAAO,CAAC5C,MAAM,GAAG,UAAU;IAC7B;IAEA,OAAO;MACLqB,OAAO,EAAE,IAAI;MACbQ,IAAI,EAAEe;IACR,CAAC;EACH;;EAEA;EACA,MAAME,SAASA,CAAA,EAAG;IAChB,MAAM,IAAIhC,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,GAAG,CAAC,CAAC;IAEtD,MAAMgC,gBAAgB,GAAG5C,eAAe,CAAC6C,OAAO,CAAC/B,IAAI,IAAIA,IAAI,CAACX,aAAa,CAAC;IAC5E,MAAM2C,eAAe,GAAG9C,eAAe,CAAC6C,OAAO,CAAC/B,IAAI,IAAIA,IAAI,CAACV,YAAY,CAAC;IAE1E,MAAM2C,mBAAmB,GAAGC,KAAK,CAACtD,IAAI,CAAC,IAAIuD,GAAG,CAACL,gBAAgB,CAAC,CAAC;IACjE,MAAMM,kBAAkB,GAAGF,KAAK,CAACtD,IAAI,CAAC,IAAIuD,GAAG,CAACH,eAAe,CAAC,CAAC;IAE/D,OAAO;MACL5B,OAAO,EAAE,IAAI;MACbQ,IAAI,EAAE;QACJyB,OAAO,EAAEJ,mBAAmB;QAC5BK,MAAM,EAAEF;MACV;IACF,CAAC;EACH;;EAEA;EACA,MAAMG,aAAaA,CAAA,EAAG;IACpB,MAAM,IAAI1C,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,GAAG,CAAC,CAAC;IAEtD,OAAO;MACLM,OAAO,EAAE,IAAI;MACbQ,IAAI,EAAE;QACJ4B,UAAU,EAAE,IAAI;QAChBC,WAAW,EAAE,IAAI;QACjBC,WAAW,EAAE,EAAE;QACfC,UAAU,EAAE,IAAI;QAChBC,cAAc,EAAE;MAClB;IACF,CAAC;EACH;EAEA,MAAMC,WAAWA,CAAA,EAAG;IAClB,MAAM,IAAIhD,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,GAAG,CAAC,CAAC;IAEtD,OAAO;MACLM,OAAO,EAAE,IAAI;MACbO,KAAK,EAAEtC,SAAS,CAACkC,MAAM;MACvBK,IAAI,EAAEvC;IACR,CAAC;EACH;;EAEA;EACAyE,QAAQA,CAACpD,KAAa,EAAE;IACtB,IAAI,CAACA,KAAK,GAAGA,KAAK;EACpB;EAEAqD,QAAQA,CAAA,EAAG;IACT,OAAO,IAAI,CAACrD,KAAK;EACnB;EAEAsD,UAAUA,CAAA,EAAG;IACX,IAAI,CAACtD,KAAK,GAAG,IAAI;EACnB;AACF;AAEA,OAAO,MAAMuD,UAAU,GAAG,IAAIzD,UAAU,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}